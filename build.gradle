plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}


java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    copyIdeResources = true

    runs {

        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
             property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')

             args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name 'modmaven'
        url "https://modmaven.dev/"
        content {
            includeGroup "mezz.jei"
        }
    }

    maven {
        name 'cursemaven'
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
    }
    maven {
        url = uri("https://maven.theillusivec4.top")
    }
    maven {
        url = "https://repo.spongepowered.org/repository/maven-public"
    }
    maven { url "https://maven.kessokuteatime.work/releases" }
}

dependencies {
       minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    //Avaritia
    implementation fg.deobf("curse.maven:re-avaritia-623969:6956226")
    //JEI
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
    //Refined Storage
    implementation fg.deobf("curse.maven:refined-storage-243076:${refined_Storage_version}")
    //Thermal Expansion
    implementation fg.deobf("curse.maven:thermal-expansion-69163:${thermal_expansion_version}")
    //Thermal Foundation
    implementation fg.deobf("curse.maven:thermal-foundation-222880:${thermal_foundation_version}")
    //CoFH Core
    implementation fg.deobf("curse.maven:cofh-core-69162:${cofh_core_version}")
    //Create
    implementation fg.deobf("curse.maven:create-328085:${create_version}")
    //PneumaticCraft: Repressurized
    implementation fg.deobf("curse.maven:pneumaticcraft-repressurized-281849:${pneumaticcraft_repressurized_version}")
    //Botania
    compileOnly fg.deobf("curse.maven:botania-225643:${botania_version}")
    //Ender IO
    implementation fg.deobf("curse.maven:ender-io-64578:${ender_io_version}")
    //Blood Magic
    implementation fg.deobf("maven.modrinth:blood-magic:${blood_magic_version}")
    //Applied Energistics
    implementation fg.deobf("curse.maven:applied-energistics-2-223794:${applied_energistics_version}")
    //GuideME
    implementation fg.deobf("curse.maven:guideme-1173950:${guideme_version}")
    //Patchouli
    implementation fg.deobf("curse.maven:patchouli-306770:${patchouli_version}")
    //Curios
    implementation fg.deobf("curse.maven:curios-309927:${curios_version}")
    //Jade
    implementation fg.deobf("curse.maven:jade-324717:${jade_version}")
    //SlashBlade
    implementation fg.deobf("curse.maven:slashblade-resharped-1022428:${slash_blade_version}")
    //Mixin
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:[0.4.1,0.5.0)"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:[0.4.1,0.5.0)"))
    //implementation(jarJar("com.iafenvoy.integration:integration-forge:[0.2,)"))
    //implementation(jarJar("maven.modrinth:kiwi:[u7HrABzs,)"))
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}


tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1',
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }


    finalizedBy 'reobfJar'
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}
Map<String, String> commonSystemProperties = [
        'forge.logging.console.level': 'debug',
        "mixin.debug.export": "true",
        "mixin.config":"${mod_id}.mixins.json"
]

mixin {
    add(sourceSets.main, "${mod_id}.refmap.json")
    config "${mod_id}.mixins.json"
}
jar {
    manifest {
        attributes([
                "MixinConfigs"          : "${mod_id}.mixins.json"
        ])
    }
}
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
